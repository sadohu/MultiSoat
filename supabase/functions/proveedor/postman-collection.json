{
	"info": {
		"_postman_id": "proveedor-crud-simple",
		"name": "Proveedor CRUD - MultiSoat",
		"description": "Colección de pruebas para el CRUD simplificado de proveedores sin autenticación",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"variable": [
		{
			"key": "base_url",
			"value": "https://ulscandvwzjqluxpwovv.supabase.co/functions/v1/proveedor"
		}
	],
	"item": [
		{
			"name": "01 - Crear Proveedor",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"razon_social\": \"Empresa {{$randomCompanyName}} S.A.C.\",\n  \"tipo_documento\": \"RUC\",\n  \"numero_documento\": \"2{{$randomInt}}{{$randomInt}}{{$randomInt}}{{$randomInt}}{{$randomInt}}{{$randomInt}}{{$randomInt}}{{$randomInt}}{{$randomInt}}\",\n  \"email\": \"{{$randomEmail}}\",\n  \"telefono\": \"9{{$randomInt}}{{$randomInt}}{{$randomInt}}{{$randomInt}}{{$randomInt}}{{$randomInt}}{{$randomInt}}{{$randomInt}}\",\n  \"direccion\": \"{{$randomStreetAddress}}\",\n  \"nombre\": \"{{$randomFirstName}} {{$randomLastName}}\"\n}"
				},
				"url": {
					"raw": "{{base_url}}",
					"host": ["{{base_url}}"]
				}
			},
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 201', function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test('Proveedor created successfully', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.success).to.be.true;",
							"    pm.expect(response.data).to.exist;",
							"    pm.expect(response.data.id).to.exist;",
							"    pm.expect(response.message).to.include('exitosamente');",
							"    ",
							"    // Guardar el ID para siguientes requests",
							"    pm.collectionVariables.set('proveedor_id', response.data.id);",
							"    pm.collectionVariables.set('proveedor_email', response.data.email);",
							"    pm.collectionVariables.set('proveedor_razon_social', response.data.razon_social);",
							"});",
							"",
							"pm.test('Response has required fields', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.data.numero_documento).to.exist;",
							"    pm.expect(response.data.tipo_documento).to.exist;",
							"    pm.expect(response.data.estado).to.exist;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "02 - Obtener Proveedor por ID",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/{{proveedor_id}}",
					"host": ["{{base_url}}"],
					"path": ["{{proveedor_id}}"]
				}
			},
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test('Proveedor found successfully', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.success).to.be.true;",
							"    pm.expect(response.data).to.exist;",
							"    pm.expect(response.data.id).to.equal(parseInt(pm.collectionVariables.get('proveedor_id')));",
							"    pm.expect(response.message).to.include('encontrado');",
							"});",
							"",
							"pm.test('Data integrity check', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.data.email).to.equal(pm.collectionVariables.get('proveedor_email'));",
							"    pm.expect(response.data.razon_social).to.equal(pm.collectionVariables.get('proveedor_razon_social'));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "03 - Listar Todos los Proveedores",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}",
					"host": ["{{base_url}}"]
				}
			},
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test('Proveedores list returned', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.success).to.be.true;",
							"    pm.expect(response.data).to.be.an('array');",
							"    pm.expect(response.pagination).to.exist;",
							"});",
							"",
							"pm.test('Pagination data is correct', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.pagination.page).to.exist;",
							"    pm.expect(response.pagination.limit).to.exist;",
							"    pm.expect(response.pagination.total).to.exist;",
							"    pm.expect(response.pagination.totalPages).to.exist;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "04 - Listar Proveedores con Paginación",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}?page=1&limit=5",
					"host": ["{{base_url}}"],
					"query": [
						{
							"key": "page",
							"value": "1"
						},
						{
							"key": "limit",
							"value": "5"
						}
					]
				}
			},
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test('Pagination parameters respected', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.pagination.page).to.equal(1);",
							"    pm.expect(response.pagination.limit).to.equal(5);",
							"    pm.expect(response.data.length).to.be.at.most(5);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "05 - Actualizar Proveedor",
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"razon_social\": \"{{$randomCompanyName}} S.A.C. - ACTUALIZADA\",\n  \"telefono\": \"9{{$randomInt}}{{$randomInt}}{{$randomInt}}{{$randomInt}}{{$randomInt}}{{$randomInt}}{{$randomInt}}{{$randomInt}}\",\n  \"direccion\": \"{{$randomStreetAddress}} - NUEVA DIRECCIÓN\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/{{proveedor_id}}",
					"host": ["{{base_url}}"],
					"path": ["{{proveedor_id}}"]
				}
			},
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test('Proveedor updated successfully', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.success).to.be.true;",
							"    pm.expect(response.data).to.exist;",
							"    pm.expect(response.message).to.include('actualizado');",
							"});",
							"",
							"pm.test('Updated fields are correct', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.data.razon_social).to.include('ACTUALIZADA');",
							"    pm.expect(response.data.direccion).to.include('NUEVA DIRECCIÓN');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "06 - Eliminar Proveedor (Soft Delete)",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/{{proveedor_id}}",
					"host": ["{{base_url}}"],
					"path": ["{{proveedor_id}}"]
				}
			},
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test('Proveedor deleted successfully', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.success).to.be.true;",
							"    pm.expect(response.data).to.exist;",
							"    pm.expect(response.message).to.include('eliminado');",
							"});",
							"",
							"pm.test('Estado changed to INACTIVO', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.data.estado).to.equal('INACTIVO');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "07 - Error: Proveedor No Encontrado",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/99999",
					"host": ["{{base_url}}"],
					"path": ["99999"]
				}
			},
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 404', function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test('Error message is correct', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.success).to.be.false;",
							"    pm.expect(response.error).to.include('no encontrado');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "08 - Error: Crear Proveedor sin Datos Requeridos",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"razon_social\": \"Empresa Sin Documento\"\n}"
				},
				"url": {
					"raw": "{{base_url}}",
					"host": ["{{base_url}}"]
				}
			},
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 400', function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test('Error message mentions required fields', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.success).to.be.false;",
							"    pm.expect(response.error).to.include('requeridos');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "09 - Error: Crear Proveedor Duplicado",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"razon_social\": \"Empresa Duplicada S.A.C.\",\n  \"tipo_documento\": \"RUC\",\n  \"numero_documento\": \"20123456789\",\n  \"email\": \"duplicado@test.com\"\n}"
				},
				"url": {
					"raw": "{{base_url}}",
					"host": ["{{base_url}}"]
				}
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Primero crear el proveedor original",
							"pm.sendRequest({",
							"    url: pm.collectionVariables.get('base_url'),",
							"    method: 'POST',",
							"    header: {",
							"        'Content-Type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify({",
							"            razon_social: 'Empresa Original S.A.C.',",
							"            tipo_documento: 'RUC',",
							"            numero_documento: '20123456789',",
							"            email: 'original@test.com'",
							"        })",
							"    }",
							"}, function(err, response) {",
							"    if (response) {",
							"        const responseJson = response.json();",
							"        if (responseJson.success) {",
							"            pm.collectionVariables.set('duplicate_test_id', responseJson.data.id);",
							"        }",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 400', function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test('Error message mentions duplicate', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.success).to.be.false;",
							"    pm.expect(response.error).to.include('Ya existe');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "10 - Verificar Proveedor Creado desde Admin-System",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/5",
					"host": ["{{base_url}}"],
					"path": ["5"]
				}
			},
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test('Proveedor from admin-system found', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.success).to.be.true;",
							"    pm.expect(response.data).to.exist;",
							"    pm.expect(response.data.id).to.equal(5);",
							"});",
							"",
							"pm.test('Estado should be ACTIVO (activated manually)', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.data.estado).to.equal('ACTIVO');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Pre-request script global",
					"console.log('🚀 Ejecutando prueba de Proveedor CRUD');"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Test script global",
					"pm.test('Response time is reasonable', function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(3000);",
					"});",
					"",
					"pm.test('Content-Type is JSON', function () {",
					"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
					"});"
				]
			}
		}
	]
}
